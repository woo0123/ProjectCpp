#include<iostream>
#include<Windows.h>

#define USER_COUNT 10

//include 많아질수록 컴퓨터가
//읽을 양이 많아져서 오래 걸림

//빌드란 무엇인가?

//컴파일 빌드 디버깅 순서

//빌드는 exe를 만드는 과정
//컴퓨터는 이것을 실행시킴.

using namespace std;

void main()
{
	//어셈블리 명령어로
	//a라는 메모리가 할당되는
	//명령어가 짜여짐.

	//컴퓨터는 어셈블리 명령어 하나만 알음.
	//스튜디오가 어셈블리 명령어로 바꿔주는걸 빌드라고 함.
	
	//동적할당.
	int a = 3;

	//메모리공간 4개
	//코드, 데이터, 힙, 스택
	new int();
	//4바이트 int형 메모리가 생성됨.
	//그냥 RAM에 만들어진게 끝.
	//new 자료형(); > 기본적으로 포인터가 전달됨.
	//동적할당을 사용할때는 포인터와 같이 사용함.
	int* myPointer = nullptr;
	myPointer = new int();
	//new int(0 > RAM에 4바이트 int형 메모리가 생성되고
	//그 주소를 myPointer가 인수받았다.

	//1. 동적할당 하는 방법
	// new 자료형();
	// 주솟값이 나오기 때문에 항상 포인터로 받아줘야한다.
	//int *myPointer = new int();

	//2.동적할당 삭제하는 방법.

	delete myPointer;
	myPointer = nullptr;

	//new int의 주솟값을 없애기 때문에
	//myPointer의 자리에 담은 주솟값이 없어짐.
	//그러니까 nullptr로 초기화를 해줌.

	//힙
	// 생성과 삭제를 프로그래머가 할 수 있음.

	// 스택 - 지역변수
	//프로그래머가 삭제에 관여할 수 없습니다.
	//중괄호 끝나면 알아서 삭제가 됩니다.

	//동적배열.
	//프로그램이 실행되는 도중에, 배열 크기를
	//지정해서 선언하는 방법.

	int userCount = 10;

	int arr[USER_COUNT];	//정적 배열

	//동적배열
	//사용하는 방법
	//포인터 = 배열
	int* arr = new int[userCount];
	arr[0] = 3;
	arr[9] = 10;

	//동적배열 삭제하는 방법.
	delete[] arr;


	//동적할당 주의점
	//항상 new를 했으면, delete를 해줘야한다.
	//만약에 delete를 안하면
	//평생 메모리가 쌓임.(메모리 누수)
	//생각보다 많이 배움
	//콘솔게임은 다 가능.

	//이제부터 배우는 내용은
	//아키텍처나 코드 관리하는 영역에
	//도움되는 영역일 때가 많음.
	//하는 방법 보고 따라할 정도로만 따라가기.

}